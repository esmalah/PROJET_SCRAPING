from fastapi import FastAPI
import json
import os

#Chemins des fichiers JSON
DATA_FILE = "./data/bbc_articles_keywords.json"

#Initialisation de l'API
app = FastAPI(title="BBC Scraper API", description="API pour acc√©der aux articles scrapp√©s, r√©sum√©s et mots-cl√©s.")

def load_articles():
    """Charge les articles depuis le fichier JSON."""
    if not os.path.exists(DATA_FILE):
        return {"error": "Aucun fichier JSON trouv√©."}
    
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

#Endpoint pour r√©cup√©rer tous les articles
@app.get("/articles", summary="R√©cup√©rer tous les articles")
async def get_articles():
    articles = load_articles()
    return {"articles": articles}

#Endpoint pour r√©cup√©rer un article par son ID
@app.get("/articles/{article_id}", summary="R√©cup√©rer un article sp√©cifique")
async def get_article(article_id: int):
    articles = load_articles()
    if str(article_id) not in articles:
        return {"error": "Article non trouv√©"}
    return articles[str(article_id)]

#Endpoint pour r√©cup√©rer les mots-cl√©s d'un article
@app.get("/articles/{article_id}/keywords", summary="R√©cup√©rer les mots-cl√©s d'un article")
async def get_article_keywords(article_id: int):
    articles = load_articles()
    if str(article_id) not in articles:
        return {"error": "Article non trouv√©"}
    return {"keywords": articles[str(article_id)].get("keywords", [])}

#Endpoint pour r√©cup√©rer le r√©sum√© d'un article
@app.get("/articles/{article_id}/summary", summary="R√©cup√©rer le r√©sum√© d'un article")
async def get_article_summary(article_id: int):
    articles = load_articles()
    if str(article_id) not in articles:
        return {"error": "Article non trouv√©"}
    return {"summary": articles[str(article_id)].get("summary", "R√©sum√© non disponible")}

#Endpoint de test
@app.get("/", summary="Endpoint de test")
async def root():
    return {"message": "API BBC Scraper est en ligne üöÄ"}

